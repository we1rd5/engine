import tkinter as tk
from functools import partial
import sympy as sp
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
matplotlib.use('TkAgg')


class Menu:
    btns = []


    @classmethod
    def close_menu(cls):
        for btn in cls.btns:
            btn.place_forget()


    @classmethod
    def open_menu(cls):
        root.title("Меню")
        calc = tk.Button(text="Калькулятор", command=cls.calculator)
        calc.place(width=700, height=80, y=50, x=50)
        cls.btns.append(calc)

    
    @classmethod
    def calculator(cls):
        cls.close_menu()
        Calculator().open_calculator()


class Calculator:
    first = 0
    second = 0
    state = "+"


    @classmethod
    def open_calculator(cls):
        root.title("Калькулятор")
        box = tk.Entry()
        box.place(relwidth=0.8, relheight=0.1, relx=0.1, rely=0.05)
        btns = [
            "7", "8", "9",
            "4", "5", "6",
            "1", "2", "3",
            "+", "0", "-",
             "*", "=", "/"
        ]
        pos_x = 80
        pos_y = 150
        k = 0
        for btn in btns:
            if k == 3:
                k = 0
                pos_x = 80
                pos_y += 100
            b = tk.Button(text=btn, command=partial(cls.button_handler, btn, box))
            b.place(width=200, height=80, x=pos_x, y=pos_y)
            pos_x += 220
            k += 1
        c = tk.Button(text="C", command=partial(cls.button_handler, "C", box))
        c.place(height=80, width=40, x=740, y=40)


    @classmethod
    def button_handler(cls, n: str, box: tk.Entry):
        if n.isdigit():
            print(n)
            box.insert(len(box.get()), n)
        else:
            if n == "+":
                cls.first = int(box.get())
                cls.state = "+"
                box.delete(0, last="end")
            if n == "-":
                cls.first = int(box.get())
                cls.state = "+"
                box.delete(0, last="end")
            if n == "/":
                cls.first = int(box.get())
                cls.state = "/"
                box.delete(0, last="end")
            if n == "*":
                cls.first = int(box.get())
                cls.state = "*"
                box.delete(0, last="end")
            if n == "=":
                cls.second = int(box.get())
                box.delete(0, last="end")
                if cls.state == "+":
                    box.insert(0, cls.first + cls.second)
                if cls.state == "-":
                    box.insert(0, cls.first - cls.second)
                if cls.state == "/":
                    box.insert(0, cls.first / cls.second)
                if cls.state == "*":
                    box.insert(0, cls.first * cls.second)
                cls.state="+"
                cls.first = 0
                second = 0
            if n == "C":
                box.delete(0, last="end")
                cls.state = "+"
                cls.first = 0
                cls.second = 0


class Analytics_Expressions:
    @classmethod
    def open_analytics(cls):
        root.title("Аналитические выражения")
        entry_box = tk.Entry()
        entry_box.place(relwidth=0.8, relheight=0.1, relx=0.1, rely=0.05)
        eq_button = tk.Button(text="=", command=partial(cls.make_expression, entry_box.get()))
        eq_button.place(width=40, height=80, x=740, y=40)
        

    @classmethod
    def make_expression(cls, s):
        st = sp.Symbol(s)
        mainframe = tk.Frame(root)
        mainframe.pack()
        label = tk.Label(mainframe)
        label.pack()
        fig = matplotlib.figure.Figure(figsize=(5, 4), dpi=100)
        ax = fig.add_subplot(111)
        canvas = FigureCanvasTkAgg(fig, master=label)
        canvas.get_tk_widget().pack(side="top", fill="both", expand=True)
        canvas._tkcanvas.pack(side="top", fill="both", expand=True)
        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(False)
        tmptext = s
        # tmptext = "$"+tmptext+"$"
        ax.clear()
        ax.text(0.2, 0.6, tmptext, fontsize=50)  
        canvas.draw()


root = tk.Tk()
root.geometry("800x800")
root.resizable(width=False, height=False)
Analytics_Expressions.open_analytics()
root.mainloop()
